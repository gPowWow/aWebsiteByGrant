[
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Here’s an example of Anscombe’s data from 1973 that I ran through an executable cell, which turned it into scatter plots with a regression line demonstrating the “Line of Best Fit” for all the data.\n\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\nView(anscombe) # View the data\nsummary(anscombe)\n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nsapply(mods, coef)  # Note the use of this function\nlapply(mods, function(fm) coef(summary(fm)))\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\npar(op)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples of “generative art” that I found through a Google search can be found through the links I posted on my homepage of this website.\nHere’s my spring leaf after running this Fall.R script in an executable cell where I changed the color of the leaf to violet.\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Title Fall color\n# Credit: https://fronkonstin.com\n\n# Install packages\ninstall.packages(\"gsubfn\")\ninstall.packages(\"tidyverse\")\nlibrary(gsubfn)\nlibrary(tidyverse)\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"violet\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() # No grid nor axes\n\n\n\n\n\n\n\nMy critique of a chart from a published work can be found by visiting my blog page on this website."
  },
  {
    "objectID": "posts/2023-9-11 Chart Critique/index.html",
    "href": "posts/2023-9-11 Chart Critique/index.html",
    "title": "Critique of a Chart",
    "section": "",
    "text": "Up above, is a graph I found from Verizon’s 2023 Data Breach Investigative Report, which can be accessed at: https://www.verizon.com/business/resources/reports/dbir/2023/introduction/ It’s a graph that shows which types of data breaches have become more or less common over a span of six years from 2017-2023. The types of data breaches listed and categorized in the graph are “denial of service,” “privilege misuse,” “system intrusion,” “basic web application attacks,” “social engineering,” “lost and stolen assets,” “miscellaneous errors,” and “everything else.” There are some pros and cons I have discovered about this graph:\nPros\n\nIt looks at the fluctuations in the amount of a particular data breach over a span of months per year based on monthly averages instead of over a span of days or weeks in order to fit all the data into the small space that the graph covers.\nIt ensures that the viewer and reader of this graph is able to distinguish which line refers to a specific data breach category by matching them based on color.\n\nCons\n\nUsing colors is not necessarily the best way to separate the lines from each other and match a specific data breach category with a specific line. It cannot be assumed that everybody has normal color vision. There are too many cool colors, especially green, blue, and different hues of purple that make it hard for the eye to focus and differentiate the lines from each other. On the light spectrum, the human eye can see the colors green pretty well and the color red fairly well, but not the color blue. We have fewer cones in our eyes that pick up the color blue and, as a result, have to focus more on texts and details that are in the color blue or blended in with a blue background.\nThe text of the data breach category “basic web application attacks” is in a bright yellow color that can make it hard to see and read.\n\nThe best solution for presenting this graph is to either incorporate some more warmer and brighter colors to provide more contrast and differentiation between the colors to help the viewer and reader distinguish which line belongs to which data breach category. Or, create different types of lines such as dotted and broken lines, for example, which I recommend, instead of colored lines."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Welcome! You have reached Grant Powell’s academic and professional website on the topic of data visualization. To help give you an idea of what data visualization is, here are some resources to check out on data visualization down below.\nData visualization of baseball data:\n\nhttps://www.baseballdatascience.com/\nhttps://flowingdata.com/tag/baseball/\n\nData visualization of weather data:\n\nhttps://flowingdata.com/index.php?s=weather\nhttps://www.climate.gov/maps-data/climate-data-primer/visualizing-climate-data\n\nData visualization of data used to create generative art:\n\nhttps://www.visualcinnamon.com/art/\nhttps://flowingdata.com/tag/generative-art/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Grant Powell is an Applied Cognition and Neuroscience Masters student pursuing the human computer interaction specialization at the University of Texas at Dallas. He is also a board-certified music therapist who strives to improve the functional skills and quality of life of clients with autism, hearing and visual impairments, physical disabilities, and intellectual and developmental disabilities. His interests include playing classical guitar and banjo, juggling, keeping up with baseball, and cooking, and spending time with his wife and his little Boston terrier."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nUniversity of Texas, Dallas | Dallas, TX | MS in Applied Cognition and Neuroscience | Aug. 2020 - Dec. 2023\nAustin Peay State University | Clarksville, TN | BS in Music Performance | Aug. 2004 - May 2008"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Critique of a Chart\n\n\n\n\n\n\n\ndata visualization\n\n\ncybersecurity\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nGrant Powell\n\n\n\n\n\n\n  \n\n\n\n\nReview of Tufte’s Future of Data Analysis Presentation\n\n\n\n\n\n\n\ndata analysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\nGrant Powell\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignment2.html",
    "href": "assignment2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "For parts 1 and 2 of this assignment I have run line by line of each script of R code of Paul Murrell’s basic R programs from his book “R Graphics by including comments in the script of what each line of code does and some comments of some changes I made for each question that was being posed within the comments:\n# Line graph plots points showing where and how the pressure \n# rises when the temperature rises from 0 to infinity. The pch # is the symbol-type of the plotted data-point.\nplot(pressure, pch=10)  \n# The placement of the text within the line graph describing \n# what the graph is showing. \ntext(150, 600, \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\")\n\n# Scatterplot\n# Note the incremental additions\n# Initializing each object with an array and list of values\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\n# This sets the margins of the graph and plot\npar(las=1, mar=c(4, 4, 4, 4), cex=.7) \nplot.new() # Completion of plotting in the curent plot and an advance to a new graphics frame\nplot.window(range(x), c(0, 6)) # Sets up the world coordinate system for a graphics window \nlines(x, y1) # Line showing plots for x and y1\nlines(x, y2) # Line showing plots for x and y2\npoints(x, y1, pch=16, cex=3) # Try different cex value? I chose 3. Sets the symbol type for each plotted point on the line \npoints(x, y2, pch=21, bg=\"red\", cex=2)  # Different background color. I changed each plotted point's color to yellow. \npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\") # Sets color for y and x-axis.\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for? It is which side of the plot the axis is to be drawn on. 1=below, 2=left, 3=above, and 4=right. \naxis(2, at=seq(0, 6, 2)) # 2 = y1 axis on left side\naxis(4, at=seq(0, 6, 2)) # 4 = y2 axis on right side\nbox(bty=\"u\") # Shape of the graph featuring an x-axis on the bottom and y-axises on the left and right side in the form of a \"u.\"\n# This inserts text to label the x-axis.\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8) \n# This inserts text to label the y-axis on the left side and I\n# changed the color of the label to match which line is being\n# shown that represents the data points for this label\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8, col=\"black\")\n# This inserts text to label the y-axis on the right side and I\n# changed the color of the label to match which line is being \n# shown that represents the data points for this label\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8, col=\"red\")\n# This inserts text within the graph to show that a specific is bird number 131.\ntext(4, 5, \"Bird 131\")\n# This sets the margins around the graph as it fits the screen and makes the lines of x-axis and y-axis black.\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Generates 50 random numbers\nY &lt;- rnorm(50)\n# Make sure no Y value limit on the x-axis exceeds [-3.5, 3.5]\nY[Y &lt; -1 | Y &gt; 1] &lt;- NA # Selection/set range. I chose -1 and 1\nx &lt;- seq(-3.5, 3.5, .1) # This sets the spacing of the tick marks along the x-axis\ndn &lt;- dnorm(x) # This establishes the numbers for a bell curve line along the \n               # x-axis to be saved in the dn object\npar(mar=c(4.5, 4.1, 3.1, 0)) # This sets the margins of the graph\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE) # This establishes the range of the x- and \n                               # y-axis and colors the histogram bars gray\n# This creates a normal bell curve line across the x-axis. \nlines(x, dnorm(x), lwd=2)\n# This sets the margins of that bell curve line within the graph\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Boxplot\n# This establishes the margins of the graph\n# I changed the bottom margin to push the x-axis up so that the label\n# can be visible\npar(mar=c(4, 4.1, 2, 1))\n# This is the boxplot function and it inserts the white boxes of data\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\n# This label what the x-axis represents\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\n# This is the boxplot function and it inserts the gray boxes of data\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        subset= supp == \"OJ\")\n# This inserts text within the graph to show that the white boxes represent\n# ascorbic acid and that the gray boxes represent orange juice\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\n# This establishes the margins of something.\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Persp\n# Sets the range of the x-axis\nx &lt;- seq(-10, 10, length= 30)\n# The range of the y-axis is the same as the x-axis\ny &lt;- x\n# I am not sure what this does\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\n# I think this sets the height range of the z axis\nz &lt;- outer(x, y, f)\n# I am not sure what this does\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\n# I changed the bottom margin of the graph to 1 to push it up for better viewing\npar(mar=c(1, 0.5, 0, 0), lwd=0.5)\n# This is persp function that creates the 3D graphic inside the box\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\n# This sets the margins for something\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# This is a piechart.\n# The parameters for the margins, mar, on bottom, left, top, right. The xpd is to read data from a dataframe it is set to false to not do anything. The cex is to determine the line thickness of text and symbols for readability.\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\n# The proportion for each pie slice within the circle each, altogether, adding up to 1.\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\n# Each pie-flavor name placement in each order corresponds in respect to the order placement of each number in the list of the pie.sales object.\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\n# This helps color in the pie slice with different shades of the grayscale from the start of the gamma ray of the gray color range to the end of it that you want and there are 6 items in the pie.sales object.\npie(pie.sales, col = gray(seq(0.3,1.0,length=6)))\n \n\nFor part 3 of this assignment, I plotted some of the following functions using data from a data set called “Happy Planet Index” at http://happyplanetindex.org:\n\npar()\nlines()\npoints()\naxis()\nbox()\ntext()\nmtext()\nhist()\nboxplot()\nlegend()\npersp()\nnames()\npie()\n\nx &lt;- c(1, 2, 3)\ny1 &lt;- c(55.8, 62.3, 55.0)\ny2 &lt;- c(77.4, 83, 74.8)\ncountry &lt;- c(\"Colombia\", \"Switzerland\", \"Ecuador\")\n\nplot.new()\nplot.window(xlim = c(0, 4), ylim = c(0, 90)) # Do I need to ensure strings and characters are accepted?\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=21, bg= \"green4\", cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"red\", cex=2)  # Different background color\npar(mar=c(4, 4, 3, 3.5), col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\", cex=\"0.8\")\naxis(1, at = x, labels = country, las = 1)# What is the first number standing for?\naxis(2, at=seq(0, 90, 10))\naxis(4, at=seq(0, 90, 10))\nbox(bty=\"u\")\nmtext(\"Countries\", side=1, line=2, cex=1, col=\"black\")\nmtext(\"Happy Planet Index\", side=2, line=2, las=0, cex=1, col=\"green4\")\nmtext(\"Life Expectancy\", side=4, line=2, las=0, cex=1, col=\"red\")"
  },
  {
    "objectID": "assignment3.html",
    "href": "assignment3.html",
    "title": "Assignment 3",
    "section": "",
    "text": "For parts 1 and 2 of this assignment, I have shown comparisons of the regression models from the anscombe01.R document by showing different ways to create the plots by changing the colors, line types, and plot characters:\n\nHere I changed the color of the outline of the plot characters from red to purple, the background color inside the plot characters from orange to pink, and the regression line from blue to green. I also changed the plot characters from the plot character identification number of 21 to 11. Finally, I changed the regression line from a solid line to a dotted-dashed line.\n\n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\nView(anscombe) # View the data\nsummary(anscombe)\n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nsapply(mods, coef)  # Note the use of this function\nlapply(mods, function(fm) coef(summary(fm)))\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\n# I changed the color of the outline of the plot character from red to purple\n# I changed the background color of the plot character from orange to pink\n# I changed the line representing the \"line of best fit\" from blue to green\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"purple\", pch = 23, bg = \"pink\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"green\", lty = 4)\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\npar(op)\n\nFor part 3 of this assignment, I have shown comparisons of the regression models from the anscombe01.R document by showing different ways to create the plots with ggplot2:\nFor part 4 of this assignment, I have shown how to replicate a Scatterplot matrix of daily COVID deaths in Europe by month from 2020 to 2023 without using ggplot2 or any packages:\n## Download COVID data from OWID GitHub\nowidall &lt;- read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n# Deselect cases/rows with OWID\nowidall &lt;- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\n# Subset by continent: Europe\nowideu &lt;- subset(owidall, continent==\"Europe\")\n\ndate &lt;- as.Date(owideu$date, format = \"%Y-%m-%d\")\ndeaths &lt;- owideu$new_deaths\n\nplot(date, deaths, type = \"p\", ylim = c(0, 7000), xlab = \"Date\",\n     ylab = \"COVID Deaths in Europe (Daily)\", col = \"magenta2\", pch = 16, \n     cex = 0.7)\npar(las = 2)\naxis.Date(1, at = seq(min(date), max(date), by = \"2 months\"), \n          format = \"%m-%Y\")\naxis(2, at = seq(0, max(y), by = 1000))\npar(mar = c(5, 4, 1, 1) + 0.1, cex.axis = 0.6)\ntext(x = as.Date(\"2020-04-15\"), y = 6000, labels = \"Spain\", cex = 0.5)\ntext(x = as.Date(\"2020-04-18\"), y = 5000, labels = \"Spain\", cex = 0.5)\ntext(x = as.Date(\"2020-12-01\"), y = 6500, labels = \"Germany\", cex = 0.5,\n     pos = 3)\ntext(x = as.Date(\"2021-11-01\"), y = 5000, labels = \"Ukraine\", cex = 0.5)\ntext(x = as.Date(\"2023-01-01\"), y = 1500, labels = \"Germany\", cex = 0.5)\ntext(x = as.Date(\"2023-09-20\"), y = 500, labels = \"Italy\", cex = 0.5)"
  }
]